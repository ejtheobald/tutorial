dist <- c(rep(15,1), rep(16,15), rep(17,20), rep(18,50), rep(19,78), rep(20, 100), rep(21,85), rep(22, 70), rep(23,60), rep(24,40), rep(25,20))#, rep(26,8)) #,15,20,50,78,100,85,70)
hist(dist)
dist <- c(rep(15,1), rep(16,15), rep(17,20), rep(18,50), rep(19,78), rep(20, 100), rep(21,85), rep(22, 70), rep(23,50), rep(24,20), rep(25,10))#, rep(26,8)) #,15,20,50,78,100,85,70)
hist(dist)
dist <- c(rep(15,0), rep(16,15), rep(17,20), rep(18,50), rep(19,78), rep(20, 100), rep(21,85), rep(22, 70), rep(23,50), rep(24,20), rep(25,10))#, rep(26,8)) #,15,20,50,78,100,85,70)
hist(dist)
dist <- c(rep(15,1), rep(16,15), rep(17,20), rep(18,50), rep(19,78), rep(20, 100), rep(21,85), rep(22, 70), rep(23,50), rep(24,20), rep(25,10))#, rep(26,8)) #,15,20,50,78,100,85,70)
hist(dist)
hist(dist, xlab = "Distance", ylab="Frequency", cex.lab=5)
hist(dist, xlab = "Distance", ylab="Frequency", cex.lab=3, )
60/74
38+23
66*.2
371*.25
92/371
93-54
exp((1.2649))
exp(-0.1088)
exp(0.1885)
0.89+1.2
0.89-1.2
ran(1:17)
random(1:17)
runif(1,1,17)
round(runif(1,1,17),0)
round(runif(1,1,17),0)
round(runif(1,1,17),0)
round(runif(1,1,17),0)
round(runif(1,1,17),0)
round(runif(1,1,17),0)
-2655.66*0.022
-58.42452 + 178.8
96/1362
51/1408
0.036/0.07
101/1362
0.03622159/0.07415565
library(tidyverse)
library(shiny)
library(shinythemes)
# Create the user interface:
ui <- fluidPage()
# Create the server function:
server <- function(input, output) {}
# Combine them into an app:
shinyApp(ui = ui, server = server)
runApp()
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
mainPanel("put my outputs here")
))
# Create the server function:
server <- function(input, output) {}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
mainPanel("put my outputs here")
)
)
# Create the server function:
server <- function(input, output) {}
# Combine them into an app:
shinyApp(ui = ui, server = server)
setwd("C:/Users/Ellie/Dropbox/elli.jenkins@gmail/UW.2010-present/2.EducationResearch/MetaAnalysis/Gaps2.0/tutorial")
library(tidyverse)
library(shiny)
library(shinythemes)
setwd("C:/Users/Ellie/Dropbox/elli.jenkins@gmail/UW.2010-present/2.EducationResearch/MetaAnalysis/Gaps2.0/tutorial")
spooky <- read_csv("spooky_data.csv")
library(tidyverse)
library(shiny)
library(shinythemes)
setwd("C:/Users/Ellie/Dropbox/elli.jenkins@gmail/UW.2010-present/2.EducationResearch/MetaAnalysis/Gaps2.0/tutorial")
spooky <- read_csv("spooky_data.csv")
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
mainPanel("put my outputs here")
)
)
# Create the server function:
server <- function(input, output) {}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state))
),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state))
),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here"),
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
),
mainPanel("put my outputs here")
)
)
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
),
mainPanel("put my outputs here")
)
)
spooky <- read_csv("spooky_data.csv")
# Create the user interface:
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
),
mainPanel("put my outputs here")
)
)
# Create the server function:
server <- function(input, output) {}
# Combine them into an app:
shinyApp(ui = ui, server = server)
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
spooky <- read_csv("spooky_data.csv")
# Create the user interface:
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
),
mainPanel("put my outputs here")
)
)
# Create the server function:
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
setwd("C:/Users/Ellie/Dropbox/elli.jenkins@gmail/UW.2010-present/2.EducationResearch/MetaAnalysis/Gaps2.0/tutorial")
spooky <- read_csv("spooky_data.csv")
# Create the user interface:
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state",
choices = unique(spooky$state)
)
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
# Create the server function:
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
# create the server function
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
region_costume <- reactive({
spooky %>%
filter(region_us_census == input$region_select) %>%
count(costume, rank)
})
output$costume_graph <- renderPlot({
ggplot(region_costume(), aes(x = costume, y = n)) +
geom_col(aes(fill = rank)) +
coord_flip() +
scale_fill_manual(values = c("black","purple","orange")) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
# create the server function
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
region_costume <- reactive({
spooky %>%
filter(region_us_census == input$region_select) %>%
count(costume, rank)
})
output$costume_graph <- renderPlot({
ggplot(region_costume(), aes(x = costume, y = n)) +
geom_col(aes(fill = rank)) +
coord_flip() +
scale_fill_manual(values = c("black","purple","orange")) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table")
)
)
)
# create the server function
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
region_costume <- reactive({
spooky %>%
filter(region_us_census == input$region_select) %>%
count(costume, rank)
})
output$costume_graph <- renderPlot({
ggplot(region_costume(), aes(x = costume, y = n)) +
geom_col(aes(fill = rank)) +
coord_flip() +
scale_fill_manual(values = c("black","purple","orange")) +
theme_minimal()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table"),
p("Region’s top costumes:"),
plotOutput(outputId = "costume_graph")
)
)
)
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
region_costume <- reactive({
spooky %>%
filter(region_us_census == input$region_select) %>%
count(costume, rank)
})
output$costume_graph <- renderPlot({
ggplot(region_costume(), aes(x = costume, y = n)) +
geom_col(aes(fill = rank)) +
coord_flip() +
scale_fill_manual(values = c("black","purple","orange")) +
theme_minimal()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("I am adding a title!"),
sidebarLayout(
sidebarPanel("put my widgets here",
selectInput(inputId = "state_select",
label = "Choose a state:",
choices = unique(spooky$state)
),
radioButtons(inputId = "region_select",
label = "Choose region:",
choices = unique(spooky$region_us_census))
),
mainPanel("put my outputs here",
p("State's top candies:"),
tableOutput(outputId = "candy_table"),
p("Region’s top costumes:"),
plotOutput(outputId = "costume_graph")
)
)
)
# create the server function
server <- function(input, output) {
state_candy <- reactive({
spooky %>%
filter(state == input$state_select) %>%
select(candy, pounds_candy_sold)
})
output$candy_table <- renderTable({
state_candy()
})
region_costume <- reactive({
spooky %>%
filter(region_us_census == input$region_select) %>%
count(costume, rank)
})
output$costume_graph <- renderPlot({
ggplot(region_costume(), aes(x = costume, y = n)) +
geom_col(aes(fill = rank)) +
coord_flip() +
scale_fill_manual(values = c("black","purple","orange")) +
theme_minimal()
})
}
# Combine them into an app:
shinyApp(ui = ui, server = server)
